diff --git a/Makefile b/Makefile
index 39a99d7..bbea0ce 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
+	$U/_syslive\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8bea0de 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,10 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+struct swap;
+struct page;
+struct swap_page;
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -36,6 +40,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -88,7 +94,7 @@ int             fork(void);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+void            proc_freepagetable(pagetable_t, uint64, int);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +112,25 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            add_page_to_phys_mem(uint64 va, int pid);
+void            remove_page_from_phys_mem(uint64 va, int pid);
+void            add_page_to_swap_mem(uint64 va, int pid, struct swap *sw);
+void            remove_page_from_swap_mem(uint64 va, int pid);
+void            remove_swap_pg(uint64 va, int pid, pte_t *pte);
+struct page*    find_page_to_swap_out(void);
+struct page*    find_page_to_swap_out_fifo(void);
+struct swap_page* find_page_from_swap_mem(uint64 va, int pid);
+void            swapout_page(uint64 va, int pid);
+void            swapin_page(struct proc *p, uint64 va, pte_t *pte);
+uint64          swapin_page_pid(int pid, uint64 va, pte_t *pte);
+int             stats(void);
+
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -147,6 +172,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             page_fault_handler(struct proc *p);
 
 // uart.c
 void            uartinit(void);
@@ -159,20 +185,21 @@ int             uartgetc(void);
 void            kvminit(void);
 void            kvminithart(void);
 void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
-int             mappages(pagetable_t, uint64, uint64, uint64, int);
+int             mappages(pagetable_t, uint64, uint64, uint64, int, int);
 pagetable_t     uvmcreate(void);
-void            uvmfirst(pagetable_t, uchar *, uint);
-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
-uint64          uvmdealloc(pagetable_t, uint64, uint64);
-int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
-void            uvmunmap(pagetable_t, uint64, uint64, int);
+void            uvmfirst(pagetable_t, uchar *, uint, int);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int, int);
+uint64          uvmdealloc(pagetable_t, uint64, uint64, int);
+int             uvmcopy(pagetable_t, pagetable_t, uint64, int);
+void            uvmfree(pagetable_t, uint64, int);
+void            uvmunmap(pagetable_t, uint64, uint64, int, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             count_used_pages(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..24cf0cc 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -62,7 +62,7 @@ exec(char *path, char **argv)
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
     uint64 sz1;
-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), p->pid)) == 0)
       goto bad;
     sz = sz1;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, 0)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
@@ -119,20 +119,20 @@ exec(char *path, char **argv)
     if(*s == '/')
       last = s+1;
   safestrcpy(p->name, last, sizeof(p->name));
-    
+
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, p->pid);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, p->pid);
   if(ip){
     iunlockput(ip);
     end_op();
@@ -161,6 +161,6 @@ loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz
     if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
       return -1;
   }
-  
+
   return 0;
 }
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..6edaae5 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -17,6 +17,7 @@ main()
     printf("xv6 kernel is booting\n");
     printf("\n");
     kinit();         // physical page allocator
+    swapinit();      // swap file
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d852043 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,6 +12,19 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+struct page {
+  uint64 va;      // virtual page number of the page
+  int procId;     // id of the process that owns the page
+  int age;        // age of the page (used for LRU page replacement policy)
+};
+
+struct swap_page {
+  uint64 va;      // virtual page number of the page
+  int procId;     // id of the process that owns the page
+  int age;        // age of the page (used for LRU page replacement policy)
+  struct swap *swapRecord; // swap struct of the page
+};
+
 int nextpid = 1;
 struct spinlock pid_lock;
 
@@ -20,6 +33,12 @@ static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
+struct page phys_mem[MAX_PSYC_PAGES]; // array of live pages in physical memory
+struct swap_page swap_mem_pages[MAX_TOTAL_PAGES]; // array of pages in swap memory
+
+int num_of_live_pages = 0; // number of live pages in physical memory
+int num_of_swap_pages = 0; // number of pages in swap memory
+
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
@@ -33,7 +52,7 @@ void
 proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
+
   for(p = proc; p < &proc[NPROC]; p++) {
     char *pa = kalloc();
     if(pa == 0)
@@ -48,7 +67,7 @@ void
 procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
@@ -93,7 +112,7 @@ int
 allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -159,7 +178,7 @@ freeproc(struct proc *p)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+    proc_freepagetable(p->pagetable, p->sz, p->pid);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -188,17 +207,17 @@ proc_pagetable(struct proc *p)
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+              (uint64)trampoline, PTE_R | PTE_X, 0) < 0){
+    uvmfree(pagetable, 0, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
-    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+              (uint64)(p->trapframe), PTE_R | PTE_W, 0) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0);
+    uvmfree(pagetable, 0, 0);
     return 0;
   }
 
@@ -208,11 +227,11 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz, int pid)
 {
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0, 0);
+  uvmfree(pagetable, sz, pid);
 }
 
 // a user program that calls exec("/init")
@@ -236,10 +255,10 @@ userinit(void)
 
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy initcode's instructions
   // and data into it.
-  uvmfirst(p->pagetable, initcode, sizeof(initcode));
+  uvmfirst(p->pagetable, initcode, sizeof(initcode), p -> pid);
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
@@ -264,11 +283,11 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, p->pid)) == 0) {
       return -1;
     }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(p->pagetable, sz, sz + n, p -> pid);
   }
   p->sz = sz;
   return 0;
@@ -288,12 +307,15 @@ fork(void)
     return -1;
   }
 
+  release(&np->lock);
+
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz, np->pid) < 0){
     freeproc(np);
-    release(&np->lock);
     return -1;
   }
+
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -372,7 +394,7 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -428,7 +450,7 @@ wait(uint64 addr)
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
@@ -446,7 +468,7 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
@@ -536,7 +558,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -615,7 +637,7 @@ int
 killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -681,3 +703,269 @@ procdump(void)
     printf("\n");
   }
 }
+
+// swapout a page from the physical memory
+void
+swapout_page(uint64 va, int pid)
+{
+  struct page *pg = find_page_to_swap_out_fifo();
+  if(pg == 0) {
+    printf("swapout_page: no page to swap out found\n");
+    return;
+  }
+
+  struct proc *p;
+  pte_t *pte;
+  for (p = proc; p < &proc[NPROC]; p++) {
+    if (p->pid == pg -> procId) {
+      printf("swapout_page: found pid: %d\n", p->pid);
+      pte = walk(p->pagetable, pg->va, 0);
+      printf("swapout_page: pte: %p\n", pte);
+      if (pte == 0) {
+        printf("swapout_page: no physical address found for va: %p\n", pg->va);
+        return;
+      }
+
+      struct swap *sw = swapalloc();
+      printf("swapout_page: sw: %p\n", sw);
+      if (sw == 0) {
+        printf("swapout_page: no swap space found\n");
+        return;
+      }
+
+      uint64 pa = PTE2PA(*pte);
+      printf("swapout_page: pa: %p\n", pa);
+      swapout(sw, (char *)pa);
+      printf("swapout_page: swapped out page: %p\n", pa);
+
+      *pte &= ~PTE_V;
+      *pte |= PTE_SWAP;
+
+      kfree((void*)pa);
+
+      add_page_to_swap_mem(pg->va, pg->procId, sw);
+
+      remove_page_from_phys_mem(pg->va, pg->procId);
+      if(pid != 0) add_page_to_phys_mem(va, pid);
+
+      printf("num_of_live_pages: %d, num_of_swap_pages: %d\n", num_of_live_pages, num_of_swap_pages);
+
+      break;
+    }
+  }
+}
+
+// swap in a page from swap memory to physical memory
+void
+swapin_page(struct proc *p, uint64 va, pte_t *pte)
+{
+    printf("swapin_page: va: %p, pid: %d\n", va, p->pid);
+    struct swap_page *sw_pg = find_page_from_swap_mem(va, p->pid);
+    if(sw_pg == 0) {
+      printf("swapin_page: no page to swap in found\n");
+      return;
+    }
+
+    if(num_of_live_pages >= MAX_PSYC_PAGES) {
+      printf("swapin_page: too many live pages in physical memory. so, first swap out\n");
+      swapout_page(0, 0);
+    }
+
+    uint64 pa = (uint64)kalloc();
+    if(pa == 0) {
+      printf("swapin_page: no physical memory found\n");
+      return;
+    }
+
+    swapin((char *)pa, sw_pg->swapRecord);
+
+    swapfree(sw_pg->swapRecord);      // free the swap struct
+
+    mappages(p->pagetable, va, PGSIZE, pa, PTE_W|PTE_X|PTE_R|PTE_U, 0);
+
+    add_page_to_phys_mem(sw_pg->va, sw_pg->procId);
+    remove_page_from_swap_mem(sw_pg->va, sw_pg->procId);
+
+    *pte &= ~PTE_SWAP;
+    *pte |= PTE_V;
+}
+
+// swap in a page from swap memory to physical memory
+uint64
+swapin_page_pid(int pid, uint64 va, pte_t *pte)
+{
+    printf("swapin_page_pid: va: %p, pid: %d\n", va, pid);
+    struct swap_page *sw_pg = find_page_from_swap_mem(va, pid);
+    if(sw_pg == 0) {
+      printf("swapin_page_pid: no page to swap in found\n");
+      return -1;
+    }
+
+    if(num_of_live_pages >= MAX_PSYC_PAGES) {
+      printf("swapin_page_pid: too many live pages in physical memory. so, first swap out\n");
+      swapout_page(0, 0);
+    }
+
+    uint64 pa = (uint64)kalloc();
+    if(pa == 0) {
+      printf("swapin_page_pid: no physical memory found\n");
+      return -1;
+    }
+
+    swapin((char *)pa, sw_pg->swapRecord);
+
+    swapfree(sw_pg->swapRecord);      // free the swap struct
+
+    add_page_to_phys_mem(sw_pg->va, sw_pg->procId);
+    remove_page_from_swap_mem(sw_pg->va, sw_pg->procId);
+
+    *pte &= ~PTE_SWAP;
+    *pte |= PTE_V;
+
+    return pa;
+}
+
+// add a live page to the physical memory
+void
+add_page_to_phys_mem(uint64 va, int pid)
+{
+  if(num_of_live_pages >= MAX_PSYC_PAGES) {
+    printf("add_page_to_phys_mem: too many live pages in physical memory\n");
+    swapout_page(va, pid);
+    return;
+  }
+
+  phys_mem[num_of_live_pages].va = va;
+  phys_mem[num_of_live_pages].procId = pid;
+  phys_mem[num_of_live_pages].age = 0;
+
+  // printf("add_page_to_phys_mem: va: %p, pid: %d\n", va, pid);
+
+  num_of_live_pages++;
+}
+
+// remove a live page from the physical memory
+void
+remove_page_from_phys_mem(uint64 va, int pid)
+{
+  int i;
+  for(i = 0; i < num_of_live_pages; i++)
+  {
+    if(phys_mem[i].va == va && phys_mem[i].procId == pid)
+    {
+      // printf("remove found va: %p, pid: %d\n", va, pid);
+      phys_mem[i] = phys_mem[num_of_live_pages - 1];
+      num_of_live_pages--;
+      return;
+    }
+  }
+}
+
+// add a swap page to the swap memory
+void
+add_page_to_swap_mem(uint64 va, int pid, struct swap *sw)
+{
+  printf("add_page_to_swap_mem: va: %p, pid: %d\n", va, pid);
+  swap_mem_pages[num_of_swap_pages].va = va;
+  swap_mem_pages[num_of_swap_pages].procId = pid;
+  swap_mem_pages[num_of_swap_pages].age = 0;
+  swap_mem_pages[num_of_swap_pages].swapRecord = sw;
+
+  num_of_swap_pages++;
+}
+
+// remove a swap page from the swap memory
+void
+remove_page_from_swap_mem(uint64 va, int pid)
+{
+  int i;
+  for(i = 0; i < num_of_swap_pages; i++)
+  {
+    if(swap_mem_pages[i].va == va && swap_mem_pages[i].procId == pid)
+    {
+      swap_mem_pages[i] = swap_mem_pages[num_of_swap_pages - 1];
+      num_of_swap_pages--;
+      return;
+    }
+  }
+}
+
+// remove a swap page from the swap memory and free the swap struct
+void remove_swap_pg(uint64 va, int pid, pte_t *pte) {
+  int i;
+  for(i = 0; i < num_of_swap_pages; i++)
+  {
+    if(swap_mem_pages[i].va == va && swap_mem_pages[i].procId == pid)
+    {
+      swapfree(swap_mem_pages[i].swapRecord);
+      *pte &= ~PTE_SWAP;
+      *pte |= PTE_V;
+      swap_mem_pages[i] = swap_mem_pages[num_of_swap_pages - 1];
+      num_of_swap_pages--;
+      return;
+    }
+  }
+}
+
+// find a live page in the physical memory according to LRU algorithm
+struct page*
+find_page_to_swap_out(void)
+{
+  int i;
+  int min_age = phys_mem[0].age;
+  int min_age_index = 0;
+  for(i = 1; i < num_of_live_pages; i++)
+  {
+    if(phys_mem[i].age < min_age)
+    {
+      min_age = phys_mem[i].age;
+      min_age_index = i;
+    }
+  }
+  return &phys_mem[min_age_index];
+}
+
+// find a live page in the physical memory according to FIFO(First In First Out) algorithm
+struct page*
+find_page_to_swap_out_fifo(void)
+{
+  return &phys_mem[0];
+}
+
+// find a page in the swap memory
+struct swap_page*
+find_page_from_swap_mem(uint64 va, int pid)
+{
+  int i;
+  for(i = 0; i < num_of_swap_pages; i++)
+  {
+    if(swap_mem_pages[i].va == va && swap_mem_pages[i].procId == pid)
+    {
+      return &swap_mem_pages[i];
+    }
+  }
+  return 0;
+}
+
+// return the number of live pages in the physical memory
+int
+stats(void)
+{
+  struct proc *p = myproc();
+  uint64 count = 0;
+
+  for (p = proc; p < &proc[NPROC]; p++) {
+    if (p->state != UNUSED && p->state != ZOMBIE) {
+      int n = count_used_pages(p->pagetable);
+      printf("PID: %d, Pages Used: %d\n", p->pid, n);
+      count += n;
+    }
+  }
+
+  printf("num_of_live_pages: %d\n", num_of_live_pages);
+  printf("actual count: %d\n", count);
+
+  printf("num_of_swap_pages: %d\n", num_of_swap_pages);
+
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..f0bb7e0 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -25,7 +25,7 @@ r_mstatus()
   return x;
 }
 
-static inline void 
+static inline void
 w_mstatus(uint64 x)
 {
   asm volatile("csrw mstatus, %0" : : "r" (x));
@@ -34,7 +34,7 @@ w_mstatus(uint64 x)
 // machine exception program counter, holds the
 // instruction address to which a return from
 // exception will go.
-static inline void 
+static inline void
 w_mepc(uint64 x)
 {
   asm volatile("csrw mepc, %0" : : "r" (x));
@@ -56,7 +56,7 @@ r_sstatus()
   return x;
 }
 
-static inline void 
+static inline void
 w_sstatus(uint64 x)
 {
   asm volatile("csrw sstatus, %0" : : "r" (x));
@@ -71,7 +71,7 @@ r_sip()
   return x;
 }
 
-static inline void 
+static inline void
 w_sip(uint64 x)
 {
   asm volatile("csrw sip, %0" : : "r" (x));
@@ -89,7 +89,7 @@ r_sie()
   return x;
 }
 
-static inline void 
+static inline void
 w_sie(uint64 x)
 {
   asm volatile("csrw sie, %0" : : "r" (x));
@@ -107,7 +107,7 @@ r_mie()
   return x;
 }
 
-static inline void 
+static inline void
 w_mie(uint64 x)
 {
   asm volatile("csrw mie, %0" : : "r" (x));
@@ -116,7 +116,7 @@ w_mie(uint64 x)
 // supervisor exception program counter, holds the
 // instruction address to which a return from
 // exception will go.
-static inline void 
+static inline void
 w_sepc(uint64 x)
 {
   asm volatile("csrw sepc, %0" : : "r" (x));
@@ -139,7 +139,7 @@ r_medeleg()
   return x;
 }
 
-static inline void 
+static inline void
 w_medeleg(uint64 x)
 {
   asm volatile("csrw medeleg, %0" : : "r" (x));
@@ -154,7 +154,7 @@ r_mideleg()
   return x;
 }
 
-static inline void 
+static inline void
 w_mideleg(uint64 x)
 {
   asm volatile("csrw mideleg, %0" : : "r" (x));
@@ -162,7 +162,7 @@ w_mideleg(uint64 x)
 
 // Supervisor Trap-Vector Base Address
 // low two bits are mode.
-static inline void 
+static inline void
 w_stvec(uint64 x)
 {
   asm volatile("csrw stvec, %0" : : "r" (x));
@@ -177,7 +177,7 @@ r_stvec()
 }
 
 // Machine-mode interrupt vector
-static inline void 
+static inline void
 w_mtvec(uint64 x)
 {
   asm volatile("csrw mtvec, %0" : : "r" (x));
@@ -203,7 +203,7 @@ w_pmpaddr0(uint64 x)
 
 // supervisor address translation and protection;
 // holds the address of the page table.
-static inline void 
+static inline void
 w_satp(uint64 x)
 {
   asm volatile("csrw satp, %0" : : "r" (x));
@@ -217,7 +217,7 @@ r_satp()
   return x;
 }
 
-static inline void 
+static inline void
 w_mscratch(uint64 x)
 {
   asm volatile("csrw mscratch, %0" : : "r" (x));
@@ -242,7 +242,7 @@ r_stval()
 }
 
 // Machine-mode Counter-Enable
-static inline void 
+static inline void
 w_mcounteren(uint64 x)
 {
   asm volatile("csrw mcounteren, %0" : : "r" (x));
@@ -305,7 +305,7 @@ r_tp()
   return x;
 }
 
-static inline void 
+static inline void
 w_tp(uint64 x)
 {
   asm volatile("mv tp, %0" : : "r" (x));
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_SWAP (1L << 9) // swap bit
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
@@ -361,3 +362,6 @@ typedef uint64 *pagetable_t; // 512 PTEs
 // Sv39, to avoid having to sign-extend virtual addresses
 // that have the high bit set.
 #define MAXVA (1L << (9 + 9 + 9 + 12 - 1))
+
+#define MAX_PSYC_PAGES 30
+#define MAX_TOTAL_PAGES 30
\ No newline at end of file
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..8807799
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..733e530 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_statLivePages(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_statLivePages] sys_statLivePages,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7152b40 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_statLivePages 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..654ef0d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,11 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return the number of live pages in the system
+uint64
+sys_statLivePages(void)
+{
+  stats();
+  return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..c0b4060 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,21 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+// page fault handler
+int
+page_fault_handler(struct proc *p) {
+  uint64 va = PGROUNDDOWN(r_stval());
+  pte_t *pte = walk(p->pagetable, va, 0);
+
+  if(va>=MAXVA || pte == 0 || (*pte & PTE_V) || (*pte & PTE_SWAP) == 0) {
+    return -1;
+  }
+
+  printf("page fault handler: va: %p, pte: %p, pid:%d\n", va, *pte, p->pid);
+  swapin_page(p, va, pte);
+  return 0;
+}
+
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -46,10 +61,10 @@ usertrap(void)
   w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
-  
+
   // save user program counter.
   p->trapframe->epc = r_sepc();
-  
+
   if(r_scause() == 8){
     // system call
 
@@ -67,10 +82,16 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    setkilled(p);
+  } else if(r_scause() == 12 || r_scause() == 13 || r_scause() == 15){
+      // page fault
+      if (page_fault_handler(myproc()) != 0) {
+        goto trap_kill;
+      }
+   } else {
+    trap_kill:
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
   }
 
   if(killed(p))
@@ -109,7 +130,7 @@ usertrapret(void)
 
   // set up the registers that trampoline.S's sret will use
   // to get to user space.
-  
+
   // set S Previous Privilege mode to User.
   unsigned long x = r_sstatus();
   x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
@@ -122,7 +143,7 @@ usertrapret(void)
   // tell trampoline.S the user page table to switch to.
   uint64 satp = MAKE_SATP(p->pagetable);
 
-  // jump to userret in trampoline.S at the top of memory, which 
+  // jump to userret in trampoline.S at the top of memory, which
   // switches to the user page table, restores user registers,
   // and switches to user mode with sret.
   uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
@@ -131,23 +152,32 @@ usertrapret(void)
 
 // interrupts and exceptions from kernel code go here via kernelvec,
 // on whatever the current kernel stack is.
-void 
+void
 kerneltrap()
 {
   int which_dev = 0;
   uint64 sepc = r_sepc();
   uint64 sstatus = r_sstatus();
   uint64 scause = r_scause();
-  
+
   if((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
   if(intr_get() != 0)
     panic("kerneltrap: interrupts enabled");
 
   if((which_dev = devintr()) == 0){
-    printf("scause %p\n", scause);
-    printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
-    panic("kerneltrap");
+    if(r_scause() == 12 || r_scause() == 13 || r_scause() == 15){
+      // page fault
+      if (page_fault_handler(myproc()) != 0)
+      {
+        goto trap_kill;
+      }
+    } else {
+    trap_kill:
+      printf("scause %p\n", scause);
+      printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
+      panic("kerneltrap");
+    }
   }
 
   // give up the CPU if this is a timer interrupt.
@@ -208,7 +238,7 @@ devintr()
     if(cpuid() == 0){
       clockintr();
     }
-    
+
     // acknowledge the software interrupt by clearing
     // the SSIP bit in sip.
     w_sip(r_sip() & ~2);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..3b1875a 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -45,7 +45,7 @@ kvmmake(void)
 
   // allocate and map a kernel stack for each process.
   proc_mapstacks(kpgtbl);
-  
+
   return kpgtbl;
 }
 
@@ -131,7 +131,7 @@ walkaddr(pagetable_t pagetable, uint64 va)
 void
 kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 {
-  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
+  if(mappages(kpgtbl, va, sz, pa, perm, 0) != 0)
     panic("kvmmap");
 }
 
@@ -140,14 +140,14 @@ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
 // allocate a needed page-table page.
 int
-mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm, int pid)
 {
   uint64 a, last;
   pte_t *pte;
 
   if(size == 0)
     panic("mappages: size");
-  
+
   a = PGROUNDDOWN(va);
   last = PGROUNDDOWN(va + size - 1);
   for(;;){
@@ -156,6 +156,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
     if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
+    if(pid != 0) add_page_to_phys_mem(a, pid);
     if(a == last)
       break;
     a += PGSIZE;
@@ -168,7 +169,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
 void
-uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free, int pid)
 {
   uint64 a;
   pte_t *pte;
@@ -179,7 +180,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
@@ -188,6 +189,12 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       kfree((void*)pa);
     }
     *pte = 0;
+
+    if(*pte & PTE_SWAP) {
+      remove_swap_pg(a, pid, pte);
+    }
+
+    if(pid != 0) remove_page_from_phys_mem(a, pid);
   }
 }
 
@@ -208,7 +215,7 @@ uvmcreate()
 // for the very first process.
 // sz must be less than a page.
 void
-uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
+uvmfirst(pagetable_t pagetable, uchar *src, uint sz, int pid)
 {
   char *mem;
 
@@ -216,14 +223,14 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
     panic("uvmfirst: more than a page");
   mem = kalloc();
   memset(mem, 0, PGSIZE);
-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U, pid);
   memmove(mem, src, sz);
 }
 
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int pid)
 {
   char *mem;
   uint64 a;
@@ -235,13 +242,13 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, pid);
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm, pid) != 0){
       kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, pid);
       return 0;
     }
   }
@@ -253,14 +260,14 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 uint64
-uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int pid)
 {
   if(newsz >= oldsz)
     return oldsz;
 
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1, pid);
   }
 
   return newsz;
@@ -289,10 +296,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz, int pid)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1, pid);
   freewalk(pagetable);
 }
 
@@ -303,24 +310,38 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
 int
-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz, int pid)
 {
   pte_t *pte;
-  uint64 pa, i;
+  uint64 pa, i, swapped_pa;
   uint flags;
   char *mem;
+  int temp = 0;
 
   for(i = 0; i < sz; i += PGSIZE){
+    temp = 0;
+    swapped_pa = 0;
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) == 0)
       panic("uvmcopy: page not present");
+
+    if(*pte & PTE_SWAP) {
+      swapped_pa = swapin_page_pid(pid, i, pte);
+    }
+
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+
+    if(swapped_pa > 0)
+      memmove(mem, (char*)swapped_pa, PGSIZE);
+    else
+      memmove(mem, (char*)pa, PGSIZE);
+    // memmove(mem, (char*)pa, PGSIZE);
+    temp = (*pte & PTE_X) == 0 && swapped_pa == 0 ? pid : 0;
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags, temp) != 0){
       kfree(mem);
       goto err;
     }
@@ -328,7 +349,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return 0;
 
  err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
+  uvmunmap(new, 0, i / PGSIZE, 1, pid);
   return -1;
 }
 
@@ -338,7 +359,7 @@ void
 uvmclear(pagetable_t pagetable, uint64 va)
 {
   pte_t *pte;
-  
+
   pte = walk(pagetable, va, 0);
   if(pte == 0)
     panic("uvmclear");
@@ -437,3 +458,19 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// count the number of used pages in active process
+int
+count_used_pages(pagetable_t pagetable)
+{
+  int used_pages = 0;
+  for (uint64 va = 0; va < MAXVA; va += PGSIZE)
+  {
+    pte_t *pte = walk(pagetable, va, 0);
+    if (pte && (*pte & PTE_V) && (*pte & PTE_U))
+    {
+      used_pages++;
+    }
+  }
+  return used_pages - 2;
+}
diff --git a/user/syslive.c b/user/syslive.c
new file mode 100644
index 0000000..6b02903
--- /dev/null
+++ b/user/syslive.c
@@ -0,0 +1,22 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+// test 1
+// This is a good place to test your implementation. Write a user code that uses some
+// number of pages provided by the command line. Make sure the user code takes some
+// time to execute. Write a system-call that prints the number of live pages being used by
+// different processes. Now run multiple instances of the user code from shell (you know
+// this from first xv6 offline) and use the system-call to check if the counts match.
+
+void test()
+{
+    statLivePages();
+}
+
+int main(int argc, char *argv[])
+{
+
+    test();
+    exit(0);
+}
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..753d4ec
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,56 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+// test 1
+// This is a good place to test your implementation. Write a user code that uses some
+// number of pages provided by the command line. Make sure the user code takes some
+// time to execute. Write a system-call that prints the number of live pages being used by
+// different processes. Now run multiple instances of the user code from shell (you know
+// this from first xv6 offline) and use the system-call to check if the counts match.
+
+void test1(int n)
+{
+    int i;
+    int *p = malloc(n * sizeof(int));
+    for (i = 0; i < n; i++)
+    {
+        p[i] = i;
+    }
+    for (i = 0; i < n; i++)
+    {
+        // printf("p[%d] = %d  ", i, p[i]);
+    }
+    printf("n = %d\n", n);
+
+    free(p);
+    statLivePages();
+}
+
+int main(int argc, char *argv[])
+{
+    int num_pages = atoi(argv[1]);
+
+    char *pages[num_pages];
+    for (int i = 0; i < num_pages; i++) {
+        pages[i] = sbrk(4096);
+        printf("Allocated page %d at %p\n", i, pages[i]);
+    }
+
+    // Use the pages for some computation
+    int sum = 0;
+    for (int i = 0; i < num_pages * 4096 / sizeof(int); i++) {
+        sum += i;
+    }
+
+    printf("Sum: %d\n", sum);
+
+    // statLivePages();
+
+    for (int i = 0; i < num_pages; i++) {
+        sbrk(-4096);
+    }
+
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..e37c7a1 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int statLivePages(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..03a14c7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("statLivePages");
