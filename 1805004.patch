diff --git a/Makefile b/Makefile
index 39a99d7..532bb33 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o  \
+  $K/random.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testticket\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..6def308 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(struct pstat*);
+int             getTotalCurrentTickets(void);
+int             generateRandomNumber(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -185,5 +190,8 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// random.c
+uint64          next_random(void);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2629e3e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +125,9 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->tickets_original = 1;
+  p->tickets_current = 1;
+  p->time_slices = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -162,6 +166,9 @@ freeproc(struct proc *p)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
+  p->tickets_original = 0;
+  p->tickets_current = 0;
+  p->time_slices = 0;
   p->pid = 0;
   p->parent = 0;
   p->name[0] = 0;
@@ -295,6 +302,9 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
+  np->tickets_original = p->tickets_original;
+  np->tickets_current = p->tickets_original;
+  np->time_slices = p->time_slices;
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -434,6 +444,29 @@ wait(uint64 addr)
   }
 }
 
+// Get Total Number of Current Tickets
+int
+getTotalCurrentTickets(void)
+{
+  struct proc *p;
+  int total_tickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE) {
+      total_tickets += p->tickets_current;
+    }
+    release(&p->lock);
+  }
+  return total_tickets;
+}
+
+// generate random number between 0 and total_tickets - 1
+int
+generateRandomNumber(int total_tickets)
+{
+  return (next_random() % total_tickets);
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -452,19 +485,40 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    int total_current_tickets = getTotalCurrentTickets();
+    if(total_current_tickets == 0) {
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        p->tickets_current = p->tickets_original;
+        release(&p->lock);
+      }
+    }
+    int random_number = generateRandomNumber(total_current_tickets);
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
+        int diff = random_number - p->tickets_current;
+        if(diff >= 0) {                 // will work exactly same as probability distribution based scheduler
+          random_number = diff;
+          release(&p->lock);
+          continue;
+        }
+
         p->state = RUNNING;
+        p->time_slices++;
         c->proc = p;
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
+        p->tickets_current--;
         c->proc = 0;
+        release(&p->lock);
+        break;
       }
       release(&p->lock);
     }
@@ -681,3 +735,43 @@ procdump(void)
     printf("\n");
   }
 }
+
+// implement settickets system call
+int
+settickets(int number)
+{
+  if(number < 1)
+    return -1;
+  int pid = myproc()->pid;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->pid == pid) {
+        p->tickets_original = number;
+        p->tickets_current = number;
+        release(&p->lock);
+        return 0;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
+
+// implement getpinfo system call
+int
+getpinfo(struct pstat *ps)
+{
+  struct proc *p;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    ps->pid[i] = p->pid;
+    ps->inuse[i] = p->state != UNUSED;
+    ps->tickets_original[i] = p->tickets_original;
+    ps->tickets_current[i] = p->tickets_current;
+    ps->time_slices[i] = p->time_slices;
+    release(&p->lock);
+    i++;
+  }
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d3ee4d9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,9 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int tickets_original;        // Number of initial tickets
+  int tickets_current;         // Number of current tickets
+  int time_slices;             // Number of time slices
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..65f6c74
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..ba40e75
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,23 @@
+// Copied From : https://www.cs.virginia.edu/~cr4bd/4414/S2021/files/lcg_parkmiller_c.txt
+
+static unsigned random_seed = 7;
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
+
+__UINT64_TYPE__ lcg_parkmiller(unsigned *state)
+{
+    const __UINT64_TYPE__ N = 0x7fffffff;
+    const __UINT64_TYPE__ G = 48271u;
+
+    __UINT64_TYPE__ div = *state / (N / G);  /* max : 2,147,483,646 / 44,488 = 48,271 */
+    __UINT64_TYPE__ rem = *state % (N / G);  /* max : 2,147,483,646 % 44,488 = 44,487 */
+
+    __UINT64_TYPE__ a = rem * G;        /* max : 44,487 * 48,271 = 2,147,431,977 */
+    __UINT64_TYPE__ b = div * (N % G);  /* max : 48,271 * 3,399 = 164,073,129 */
+
+    return *state = (a > b) ? (a - b) : (a + (N - b));
+}
+
+__UINT64_TYPE__ next_random() {
+    return lcg_parkmiller(&random_seed);
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..88ddb92 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return how many tickets the process has
+uint64
+sys_settickets(void)
+{
+  int tickets;
+  argint(0, &tickets);
+  if(tickets < 1)
+    return -1;
+  settickets(tickets);
+  return 0;
+}
+
+// return info about processes, including time slices count each has been schedules
+// and process id of each process
+uint64
+sys_getpinfo(void)
+{
+  uint64 ps;
+  struct pstat ps2;
+  argaddr(0, &ps);
+  if(ps < 0)
+    return -1;
+  getpinfo(&ps2);
+  if(copyout(myproc()->pagetable, ps, (char*)&ps2, sizeof(ps2)) < 0)
+    return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..6952286
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,21 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    printf("\nStatistical information about the in use processes\n");
+    struct pstat ps;
+    getpinfo(&ps);
+    printf("\nPID | In Use | Original Tickets | Current Tickets | Time Slices\n");
+
+    for (int i = 0; i < NPROC; i++) {
+        if (ps.inuse[i] == 1) {
+            printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", ps.pid[i], ps.inuse[i], ps.tickets_original[i], ps.tickets_current[i], ps.time_slices[i]);
+        }
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..9ed041f
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+   // without fork
+   printf("testticket without fork\n");
+   int tickets = atoi(argv[1]);
+   settickets(tickets);
+
+   while (1) { /* code */}
+   exit(0);
+
+//    // with fork
+//    printf("testticket with fork\n");
+//    int tickets = atoi(argv[1]);
+//    settickets(tickets);
+
+//    int rc = fork();
+//     if (rc < 0) {
+//         printf("fork failed\n");
+//         exit(1);
+//     } else if (rc == 0) {
+//         // child
+//         // printf("Child process\n");
+//         while (1) { /* code */}
+//         exit(0);
+//     } else {
+//         // parent
+//         // printf("Parent process\n");
+//         while (1) { /* code */}
+//         exit(0);
+//     }
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
