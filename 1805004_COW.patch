diff --git a/Makefile b/Makefile
index 39a99d7..fce0cd7 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_cowtest1\
+	$U/_cowtest2\
+	$U/_cowtest3\
+	$U/_cowtest_all\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..690e1ff 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,11 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            increase_ref_count(void *);
+void            decrease_ref_count(void *);
+void            kfree_ref_count(void *);
+int             get_ref_count(void *);
+uint64          freePages_count(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +111,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          usedPages_count(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -147,6 +153,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             COW_fault_handler(pagetable_t, uint64);
 
 // uart.c
 void            uartinit(void);
@@ -173,6 +180,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+uint64          count_used_pages(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..47c6077 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,9 +23,46 @@ struct {
   struct run *freelist;
 } kmem;
 
+// structure for the reference count of the page
+struct {
+  struct spinlock lock;
+  int ref_count[PGROUNDUP(PHYSTOP) / PGSIZE];
+} ref_page;
+
+// increase the reference count of the page
+void increase_ref_count(void *pa)
+{
+  acquire(&ref_page.lock);
+  ref_page.ref_count[(uint64)pa / PGSIZE]++;
+  release(&ref_page.lock);
+}
+
+// decrease the reference count of the page
+void decrease_ref_count(void *pa)
+{
+  acquire(&ref_page.lock);
+  ref_page.ref_count[(uint64)pa / PGSIZE]--;
+  release(&ref_page.lock);
+}
+
+// get the reference count of the page
+int get_ref_count(void *pa)
+{
+  acquire(&ref_page.lock);
+  int ref_count = ref_page.ref_count[(uint64)pa / PGSIZE];
+  release(&ref_page.lock);
+  return ref_count;
+}
+
 void
 kinit()
 {
+  // initializes all the reference count of the pages to 0
+  initlock(&ref_page.lock, "ref_page");
+  acquire(&ref_page.lock);
+  memset(ref_page.ref_count, 0, sizeof(ref_page.ref_count));
+  release(&ref_page.lock);
+
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
@@ -34,9 +71,15 @@ void
 freerange(void *pa_start, void *pa_end)
 {
   char *p;
-  p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  p = (char *)PGROUNDUP((uint64)pa_start);
+  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE)
+  {
+    // update the reference count of the page to 1
+    increase_ref_count((void *)p);
+
+    // now kfree will decrease the reference count of the page to 0 again
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -48,13 +91,20 @@ kfree(void *pa)
 {
   struct run *r;
 
-  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+  if (((uint64)pa % PGSIZE) != 0 || (char *)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  // decrease the reference count of the page
+  decrease_ref_count(pa);
+
+  // if the reference count of the page is not 0, then do not free the page
+  if (get_ref_count(pa) > 0)
+    return;
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
-  r = (struct run*)pa;
+  r = (struct run *)pa;
 
   acquire(&kmem.lock);
   r->next = kmem.freelist;
@@ -72,11 +122,31 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if (r)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
-    memset((char*)r, 5, PGSIZE); // fill with junk
-  return (void*)r;
+  if (r)
+  {
+    memset((char *)r, 5, PGSIZE); // fill with junk
+    // increase the reference count of the page
+    increase_ref_count((void *)r);
+  }
+
+  return (void *)r;
 }
+
+// calculate number of free pages
+uint64
+freePages_count(void)
+{
+  struct run *r;
+  uint64 pgCount = 0;
+
+  acquire(&kmem.lock);
+  for(r = kmem.freelist; r; r = r->next)
+    pgCount++;
+  release(&kmem.lock);
+
+  return pgCount;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..539ec0b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+// count all the live pages in the process's page table
+uint64
+usedPages_count(void)
+{
+  struct proc *p = myproc();
+  uint64 count = 0;
+
+  for (p = proc; p < &proc[NPROC]; p++) {
+    if (p->state != UNUSED && p->state != ZOMBIE) {
+      int n = count_used_pages(p->pagetable);
+      printf("PID: %d, Pages Used: %d\n", p->pid, n);
+      count += n;
+    }
+  }
+
+  return count;
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
old mode 100644
new mode 100755
index 20a01db..b939b86
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_RSW (1L << 8) // reserved for software (for COW)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..9270a2d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_statPage(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_statPage] sys_statPage,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..8e98b17 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_statPage 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..d83f85d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,13 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return the number of used pages & free pages in the system
+uint64
+sys_statPage(void)
+{
+  printf("Statistics of page usage\n");
+  printf("Number of used pages: %d\n", usedPages_count());
+  printf("Number of free pages: %d\n", freePages_count());
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..8b0a83a 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,47 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+// Copy On Write fault handler
+// 0 -> success
+// -1 -> failure
+int COW_fault_handler(pagetable_t pagetable, uint64 va)
+{
+  uint64 pa;
+  pte_t *pte = walk(pagetable, va, 0);
+
+  // check if the page table entry is valid, user accessible
+  if (pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
+  {
+    return -1;
+  }
+
+  // check if the page is COW
+  if ((*pte & PTE_RSW) == 0)
+  {
+    return 1;
+  }
+
+  // allocate a new page
+  char *mem = kalloc();
+  if (mem == 0)
+  {
+    return -1;
+  }
+
+  // copy the data from the old page to the new page
+  pa = PTE2PA(*pte);
+  memmove(mem, (char *)pa, PGSIZE);
+
+  // update the page table entry
+  uint flags = (PTE_FLAGS(*pte) & ~PTE_RSW) | PTE_W;
+  *pte = PA2PTE(mem) | flags;
+
+  // free the old page
+  kfree((void *)pa);
+
+  return 0;
+}
+
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -67,7 +108,26 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  }
+  else if (r_scause() == 15) // page fault caused by write
+  {
+    // virtual address that caused the fault
+    uint64 va = r_stval();
+
+    // process killed if
+    // 1. va is not in the process's address space
+    // 2. va is out of the process's stack
+    // 2. COW fault handler failed
+    if (va >= MAXVA ||
+        (va <= PGROUNDDOWN(p->trapframe->sp) && va >= PGROUNDDOWN(p->trapframe->sp) - PGSIZE) ||
+        COW_fault_handler(p->pagetable, PGROUNDDOWN(va)) != 0)
+    {
+      goto trap_kill;
+    }
+  }
+  else
+  {
+  trap_kill:
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..97fbd14 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -316,14 +316,25 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+
+    // if ((mem = kalloc()) == 0)         // no new page is allocated
+    //   goto err;
+    // memmove(mem, (char *)pa, PGSIZE);
+
+    // make sure the write flag is cleared and COW flag is set (of course if writable)
+    *pte = (*pte & PTE_W) ? ((*pte & ~PTE_W) | PTE_RSW) : *pte;
+
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    // PTEs in the child process points to the parent's physical pages
+    if (mappages(new, i, PGSIZE, pa, flags) != 0)
+    {
+      // kfree(mem);
       goto err;
     }
+
+    // increase the reference count of the physical page
+    increase_ref_count((void *)pa);
   }
   return 0;
 
@@ -353,8 +364,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
-  while(len > 0){
+  while (len > 0)
+  {
     va0 = PGROUNDDOWN(dstva);
+
+    // handle COW fault on kernel mode
+    if (va0 >= MAXVA || COW_fault_handler(pagetable, va0) < 0)
+      return -1;
+
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
@@ -437,3 +454,19 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// count the number of used pages in active process
+uint64
+count_used_pages(pagetable_t pagetable)
+{
+  uint64 used_pages = 0;
+  for (uint64 va = 0; va < MAXVA; va += PGSIZE)
+  {
+    pte_t *pte = walk(pagetable, va, 0);
+    if (pte && (*pte & PTE_V))
+    {
+      used_pages++;
+    }
+  }
+  return used_pages;
+}
\ No newline at end of file
diff --git a/user/cowtest1.c b/user/cowtest1.c
new file mode 100644
index 0000000..75c37ca
--- /dev/null
+++ b/user/cowtest1.c
@@ -0,0 +1,44 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+// test 1 & 2
+// Write a user code to check if fork() system-call works and handles a write operation correctly
+
+int main(int argc, char *argv[])
+{
+    int s = 1024;
+    char *p = sbrk(s);
+
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", s);
+        exit(-1);
+    }
+
+    for (char *q = p; q < p + s; q += 4096)
+    {
+        *(int *)q = getpid();
+    }
+
+    int pid = fork();
+    if (pid < 0)
+    {
+        printf("fork() failed\n");
+        exit(-1);
+    }
+
+    if (pid == 0)
+        exit(0);
+
+    wait(0);
+
+    if (sbrk(-s) == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(-%d) failed\n", s);
+        exit(-1);
+    }
+
+    printf("test 1 & 2 ok\n");
+    exit(0);
+}
diff --git a/user/cowtest2.c b/user/cowtest2.c
new file mode 100644
index 0000000..a518add
--- /dev/null
+++ b/user/cowtest2.c
@@ -0,0 +1,62 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+// test 3
+// Write a user code to check if fork() system-call works and a COW page is freed when both parent and child process
+// writes to it. Write a system call that prints the statistics for page usage: the number of pages
+// being used by each running process and the number of pages in freelist
+
+void test3()
+{
+    printf("Initial Statistics:\n");
+    statPage();
+
+    char *p = sbrk(4096);
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", 4096);
+        exit(-1);
+    }
+
+    statPage();
+
+    *p = '1';
+    printf("PID %d: Parent writes: %c\n", getpid(), *p);
+    statPage();
+
+    int pid = fork();
+    if (pid < 0)
+    {
+        printf("fork() failed\n");
+        exit(1);
+    }
+
+    if (pid == 0)
+    {
+        printf("PID %d: Child starts: %c\n", getpid(), *p);
+        statPage();
+
+        *p = '2';
+        printf("PID %d: Child writes: %c\n", getpid(), *p);
+        statPage();
+        exit(0);
+    }
+    else
+    {
+        wait(0);
+        printf("PID %d: Parent finishes: %c\n", getpid(), *p);
+        statPage();
+    }
+
+    printf("Final Statistics:\n");
+    statPage();
+
+    printf("Test 3 page statistics: OK\n");
+}
+
+int main(int argc, char *argv[])
+{
+    test3();
+    exit(0);
+}
diff --git a/user/cowtest3.c b/user/cowtest3.c
new file mode 100644
index 0000000..9ab6528
--- /dev/null
+++ b/user/cowtest3.c
@@ -0,0 +1,69 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/memlayout.h"
+
+// test 4
+//  copyout() gets called for pipe and file I/O. So, your test code should do some file
+// I/O or pipe operation before and after fork().
+
+int fds[2];
+char buf[4096];
+
+void copyoutTest() {
+    printf("copyout: ");
+
+    buf[0] = 99;
+
+    for (int i = 0; i < 4; i++) {
+        if (pipe(fds) != 0) {
+            printf("pipe() failed\n");
+            exit(-1);
+        }
+
+        int pid = fork();
+        if (pid < 0) {
+            printf("fork failed\n");
+            exit(-1);
+        }
+        if (pid == 0) {
+            sleep(1);
+            if (read(fds[0], buf, sizeof(i)) != sizeof(i)) {
+                printf("error: read failed\n");
+                exit(1);
+            }
+            sleep(1);
+            int j = *(int *)buf;
+            if (j != i) {
+                printf("error: read worked but wrong value\n");
+                exit(1);
+            }
+            exit(0);
+        }
+        if (write(fds[1], &i, sizeof(i)) != sizeof(i)) {
+            printf("error: write failed\n");
+            exit(-1);
+        }
+    }
+
+    int xstatus = 0;
+    for (int i = 0; i < 4; i++) {
+        wait(&xstatus);
+        if (xstatus != 0) {
+            exit(1);
+        }
+    }
+
+    if (buf[0] != 99) {
+        printf("error: child overwrote parent\n");
+        exit(1);
+    }
+
+    printf("test 4 copyout passed\n");
+}
+
+int main(int argc, char *argv[])
+{
+    copyoutTest();
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/cowtest_all.c b/user/cowtest_all.c
new file mode 100644
index 0000000..02e367f
--- /dev/null
+++ b/user/cowtest_all.c
@@ -0,0 +1,221 @@
+/*
+Collected Test Case from MIT PDOS : tests for copy-on-write fork() assignment.
+*/
+
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+#include "kernel/stat.h"
+
+// allocate more than half of physical memory,
+// then fork. this will fail in the default
+// kernel, which does not support copy-on-write.
+void simpletest()
+{
+    uint64 phys_size = PHYSTOP - KERNBASE;
+    int sz = (phys_size / 3) * 2;
+
+    printf("simple: ");
+
+    char *p = sbrk(sz);
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", sz);
+        exit(-1);
+    }
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        *(int *)q = getpid();
+    }
+
+    int pid = fork();
+    if (pid < 0)
+    {
+        printf("fork() failed\n");
+        exit(-1);
+    }
+
+    if (pid == 0)
+        exit(0);
+
+    wait(0);
+
+    if (sbrk(-sz) == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(-%d) failed\n", sz);
+        exit(-1);
+    }
+
+    printf("ok\n");
+}
+
+// three processes all write COW memory.
+// this causes more than half of physical memory
+// to be allocated, so it also checks whether
+// copied pages are freed.
+void threetest()
+{
+    uint64 phys_size = PHYSTOP - KERNBASE;
+    int sz = phys_size / 4;
+    int pid1, pid2;
+
+    printf("three: ");
+
+    char *p = sbrk(sz);
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", sz);
+        exit(-1);
+    }
+
+    pid1 = fork();
+    if (pid1 < 0)
+    {
+        printf("fork failed\n");
+        exit(-1);
+    }
+    if (pid1 == 0)
+    {
+        pid2 = fork();
+        if (pid2 < 0)
+        {
+            printf("fork failed");
+            exit(-1);
+        }
+        if (pid2 == 0)
+        {
+            for (char *q = p; q < p + (sz / 5) * 4; q += 4096)
+            {
+                *(int *)q = getpid();
+            }
+            for (char *q = p; q < p + (sz / 5) * 4; q += 4096)
+            {
+                if (*(int *)q != getpid())
+                {
+                    printf("wrong content\n");
+                    exit(-1);
+                }
+            }
+            exit(-1);
+        }
+        for (char *q = p; q < p + (sz / 2); q += 4096)
+        {
+            *(int *)q = 9999;
+        }
+        exit(0);
+    }
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        *(int *)q = getpid();
+    }
+
+    wait(0);
+
+    sleep(1);
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        if (*(int *)q != getpid())
+        {
+            printf("wrong content\n");
+            exit(-1);
+        }
+    }
+
+    if (sbrk(-sz) == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(-%d) failed\n", sz);
+        exit(-1);
+    }
+
+    printf("ok\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void filetest()
+{
+    printf("file: ");
+
+    buf[0] = 99;
+
+    for (int i = 0; i < 4; i++)
+    {
+        if (pipe(fds) != 0)
+        {
+            printf("pipe() failed\n");
+            exit(-1);
+        }
+        int pid = fork();
+        if (pid < 0)
+        {
+            printf("fork failed\n");
+            exit(-1);
+        }
+        if (pid == 0)
+        {
+            sleep(1);
+            if (read(fds[0], buf, sizeof(i)) != sizeof(i))
+            {
+                printf("error: read failed\n");
+                exit(1);
+            }
+            sleep(1);
+            int j = *(int *)buf;
+            if (j != i)
+            {
+                printf("error: read the wrong value\n");
+                exit(1);
+            }
+            exit(0);
+        }
+        if (write(fds[1], &i, sizeof(i)) != sizeof(i))
+        {
+            printf("error: write failed\n");
+            exit(-1);
+        }
+    }
+
+    int xstatus = 0;
+    for (int i = 0; i < 4; i++)
+    {
+        wait(&xstatus);
+        if (xstatus != 0)
+        {
+            exit(1);
+        }
+    }
+
+    if (buf[0] != 99)
+    {
+        printf("error: child overwrote parent\n");
+        exit(1);
+    }
+
+    printf("ok\n");
+}
+
+int main(int argc, char *argv[])
+{
+    simpletest();
+
+    // check that the first simpletest() freed the physical memory.
+    simpletest();
+
+    threetest();
+    threetest();
+    threetest();
+
+    filetest();
+
+    printf("ALL COW TESTS PASSED\n");
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..7672d4a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int statPage(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..10c6d3e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("statPage");
